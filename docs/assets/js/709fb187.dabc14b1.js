"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[955],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||a;return n?i.createElement(m,s(s({ref:t},p),{},{components:n})):i.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},301:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],o={sidebar_position:2,title:"Design principles"},l=void 0,u={unversionedId:"design-notes/principles",id:"design-notes/principles",isDocsHomePage:!1,title:"Design principles",description:"Reuse as much of the interface as possible",source:"@site/docs/design-notes/principles.md",sourceDirName:"design-notes",slug:"/design-notes/principles",permalink:"/SLiCAP2/next/design-notes/principles",editUrl:"https://github.com/slicap/slicap/edit/main/website/docs/design-notes/principles.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Design principles"},sidebar:"docSidebar",previous:{title:"Design goals",permalink:"/SLiCAP2/next/design-notes/goals"},next:{title:"Related projects / inspiration",permalink:"/SLiCAP2/next/design-notes/related"}},p=[{value:"Reuse as much of the interface as possible",id:"reuse-as-much-of-the-interface-as-possible",children:[]},{value:"Optimisation shouldn&#39;t get in the way of the user",id:"optimisation-shouldnt-get-in-the-way-of-the-user",children:[]},{value:"Only do tasks unique to SliCAP",id:"only-do-tasks-unique-to-slicap",children:[]},{value:"Documentation should be short, but comprehensive",id:"documentation-should-be-short-but-comprehensive",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"reuse-as-much-of-the-interface-as-possible"},"Reuse as much of the interface as possible"),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The 18 different analyses types have been consolidated in variations on 5 base analyses, mostly by making the output domain selectable. (learnability)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This has actually increased the amount of possible analyses. (flexibility)"))),(0,a.kt)("li",{parentName:"ul"},"The detector syntax is the same among all analyses. (learnability)")),(0,a.kt)("h3",{id:"optimisation-shouldnt-get-in-the-way-of-the-user"},"Optimisation shouldn't get in the way of the user"),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Rather than setting rigid conditions on the input, the similarity of parameter stepping analyses should be detected by SLiCAP.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This brings performance speedup in more cases. (flexibility)"),(0,a.kt)("li",{parentName:"ul"},"This ensures maximum flexibility. (flexibility)")))),(0,a.kt)("h3",{id:"only-do-tasks-unique-to-slicap"},"Only do tasks unique to SliCAP"),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Instead of defining a stepping syntax that is specific to SliCAP, parameter stepping is handled by python for loops.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Instead of learning something specific to SLiCAP, the user learns a general principle. (learnability)"),(0,a.kt)("li",{parentName:"ul"},"This gives the user access to the full flexibility of python. (flexibility)")))),(0,a.kt)("h3",{id:"documentation-should-be-short-but-comprehensive"},"Documentation should be short, but comprehensive"),(0,a.kt)("p",null,"Examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Inspired by Docusaurus, sentences contain no fluff. (learnability)"),(0,a.kt)("li",{parentName:"ul"},"Every bit of functionality has a tutorial with short usage cases. (learnability)")))}d.isMDXComponent=!0}}]);